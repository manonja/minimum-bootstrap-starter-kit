version: 2.1

# testing jobs are all the same, so just use a template
defaults:
  parallelism: 1
  working_directory: ~/app
  docker:
    - image: cypress/base:10
  environment:
    TERM: xterm
  steps:
    - attach_workspace:
        at: ~/
    # some examples have the server part
    # so start it in the background
    # - run:
    #     command: |
    #       cd examples/$CIRCLE_JOB
    #       npm run start --if-present
    #     name: start the server
    #     background: true
    - run:
        # only record the tests on Cypress Dashboard
        # if the record key is set. Usually it is NOT set
        # for forked pull request because environment variables
        # are not passed to the external PRs
        command: |
          cd examples/$CIRCLE_JOB
          if [ -z "$CYPRESS_RECORD_KEY" ]; then
            npm run cy:run
          else
            npm run cy:run -- --record --group $CIRCLE_JOB
          fi
        name: Cypress tests

jobs:
  # a single job that installs dependencies (NPM and Cypress)
  build:
    working_directory: ~/app
    docker:
      - image: cypress/base:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          key: cache-dirs-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum ".circleci/config.yml" }}
      - run: npm ci

      # Use Git commit message to install any pre-release versions of Cypress
      - run: npm i -g @cypress/commit-message-install
      # if there is no special JSON comment in the current commit body
      # then this command does nothing
      - run: commit-message-install --else "echo nothing custom to install"

      # run verify and then save cache.
      # this ensures that the Cypress verified status is cached too
      - run: npm run cypress:verify
      - run: npm run stop-only
      - save_cache:
          key: cache-dirs-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - ~/.npm
            - ~/.cache
      # all other test jobs will run AFTER this build job finishes
      # to avoid reinstalling dependencies, we persist the source folder "app"
      # and the Cypress binary to workspace, which is the fastest way
      # for Circle jobs to pass files
      - persist_to_workspace:
          root: ~/
          paths:
            - app
            - .cache/Cypress

  # dummy job running after all end-to-end tests
  after-tests:
    docker:
      - image: cypress/base:10
    steps:
      - run: echo "all good"

  # a single utility job that can run multiple examples one by one
  # but with chunking
  test:
    parallelism: 2
    working_directory: ~/app
    docker:
      - image: cypress/base:10
    environment:
      TERM: xterm
    steps:
      - attach_workspace:
          at: ~/
      # when running in parallel, the total number of parallel containers
      # is in variable CIRCLE_NODE_TOTAL and the current container index in CIRCLE_NODE_INDEX
      # which starts at 0 and goes to $CIRCLE_NODE_TOTAL - 1
      - run: npm run test:ci -- --chunk $CIRCLE_NODE_INDEX --total-chunks $CIRCLE_NODE_TOTAL

  # a single utility script to run multiple examples against Chrome
  test-chrome:
    parallelism: 2
    working_directory: ~/app
    docker:
      - image: cypress/browsers:node12.0.0-chrome75
    environment:
      TERM: xterm
    steps:
      - attach_workspace:
          at: ~/
      - run: npm run test:ci:chrome -- --chunk $CIRCLE_NODE_INDEX --total-chunks $CIRCLE_NODE_TOTAL


# list all jobs to run and their dependencies here
# and then use this list from workflow definition
all_jobs: &all_jobs
  - build
  - test:
      requires:
        - build
      filters:
        branches:
          only:
            - master
            - develop

  - test-chrome:
      requires:
        - build
      filters:
        branches:
          only:
            - master
            - develop


workflows:
  version: 2

  # run this workflow on each commit and pull request
  all-recipes:
    jobs: *all_jobs

  # since this is testing a lot of external sites
  # let's run these tests once per day (at night)
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *all_jobs
